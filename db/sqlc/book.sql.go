// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: book.sql

package db

import (
	"context"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (
  title, author_id, genre_id, price, available
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, title, author_id, genre_id, price, available, created_at
`

type CreateBookParams struct {
	Title     string `json:"title"`
	AuthorID  int64  `json:"author_id"`
	GenreID   int64  `json:"genre_id"`
	Price     int64  `json:"price"`
	Available bool   `json:"available"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.Title,
		arg.AuthorID,
		arg.GenreID,
		arg.Price,
		arg.Available,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.AuthorID,
		&i.GenreID,
		&i.Price,
		&i.Available,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books
WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const getBook = `-- name: GetBook :one
SELECT id, title, author_id, genre_id, price, available, created_at FROM books
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.AuthorID,
		&i.GenreID,
		&i.Price,
		&i.Available,
		&i.CreatedAt,
	)
	return i, err
}

const listBooks = `-- name: ListBooks :many
SELECT id, name, bio FROM authors
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListBooksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBooks(ctx context.Context, arg ListBooksParams) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, listBooks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :one
UPDATE books
  set price = $2,
  available = $3
WHERE id = $1
RETURNING id, title, author_id, genre_id, price, available, created_at
`

type UpdateBookParams struct {
	ID        int64 `json:"id"`
	Price     int64 `json:"price"`
	Available bool  `json:"available"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateBook, arg.ID, arg.Price, arg.Available)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.AuthorID,
		&i.GenreID,
		&i.Price,
		&i.Available,
		&i.CreatedAt,
	)
	return i, err
}
